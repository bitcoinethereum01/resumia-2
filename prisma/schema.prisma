generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String?    @db.VarChar(255)
  fullName      String?    @db.VarChar(255)
  email         String?    @unique @db.VarChar(255)
  password      String?    @db.VarChar(255)
  emailVerified DateTime?  @db.Timestamp(6)
  image         String?    @db.VarChar(2048)
  isActive      Boolean?
  accounts      Account[]
  sessions      Session[]
  summaries     Summary[]
  feedbacks     Feedback[]
  favorites     Favorite[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String? @db.VarChar(255)
  scope             String? @db.VarChar(255)
  id_token          String?
  session_state     String? @db.VarChar(255)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  sessionToken String   @unique @db.VarChar(255)
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
}

model Summary {
  id            String    @id @default(uuid())
  userId        String?  
  creationDate  DateTime  @db.Timestamp(6)    
  jsonSummary   Json?     @db.Json
  videoLink     String?   @db.VarChar(2048)
  transcription String?    @db.Text

  feedbacks     Feedback[]
  favorites     Favorite[]
  user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Feedback {
  id            String @id @default(uuid())
  summaryId     String
  userId        String 
  description   String
  type          FeedbackType
  @@unique([summaryId, userId])

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  summary       Summary   @relation(fields: [summaryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Favorite {
  id            String @id @default(uuid())
  summaryId     String
  userId        String 
  @@unique([summaryId, userId])

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  summary       Summary   @relation(fields: [summaryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum FeedbackType {
  POSITIVE
  NEGATIVE
}